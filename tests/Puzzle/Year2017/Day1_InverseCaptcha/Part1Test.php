<?php

namespace Tests\Puzzle\Year2017\Day1_InverseCaptcha;

use App\Puzzle\Year2017\Day1_InverseCaptcha\Part1;
use PHPUnit\Framework\TestCase;

class Part1Test extends TestCase
{
    private const PUZZLE_INPUT_MULTI_LINE = <<<'EOT'
        73857646862514444739979151237829725363437326575178346717594627954612137824283429
        31896181695578996274321317419242359534783957372932953774336338118488967172727651
        86249883819531765428979755868345851112699621795332281722937237345586217784447844
        33918354845915252356518634648911779272449549258277867994365365925613742692994747
        38321293575385899438446558569241236278779779983587912431395475244796538888373287
        18692164742686623775673734273197676395949914999631559158471612219918329527743987
        29113713139245944867664794385444174165297434951148198259845244373672252341847726
        17942525954961136976875325182725754768372684531972614455134523596338355374444273
        52211536223873438316477812937662862149766296545676163179617835359962988766593952
        18924473612194796464839787983927161197932827177395248973859582737267763181549776
        75546287789874265339688753977185129334929715486381875286278528247696464162297691
        69815471277558954194526357489726657599645554762553794792797249797933393211516515
        14627422163273211162913723965856186644757153212981223357892629422845713284145693
        75464386446824882551918843185195829547373915482687534432942778312542752798313434
        62849829521669264671313724419812321953169355984891583462382591919153265873542217
        69654517418696667148741584925564459548522991618686514481238258217753632192462445
        15946392686275545561989355573946924767442253465342753995764791927951158771231944
        17769246953149455969791117661394339625814182224457845749836135238151816658758334
        22338169893295444156211273979967239973972196764869666847296537635257686553244439
        91129862129181215339947555257279592921258246646215764736698583211625887436176149
        25135645235821145834343937468834111652972697243469732473452511419222964146422798
        65828454777417477876735888484397136193268896243269445533867828216335387753719159
        73899959295232927996742218926514374168947582441892731462993481877277714436887597
        22387188114969322892844242761166465577233347189373593241993783293795349592951483
        76638839384166443873428258366737337781194815144275124533576283966667915475318148
        44176342696362416842993761919369994779897357348334197721735231299249116477
        EOT;

    /**
     * Part 1.
     *
     * @var Part1
     */
    private $part1;

    public static function getPuzzleInput(): string
    {
        $puzzleInput = preg_replace('/\n/', '', self::PUZZLE_INPUT_MULTI_LINE);
        return $puzzleInput;
    }

    public function inputOutputProvider(): array
    {
        return [
            ['1122', 3],
            ['1111', 4],
            ['1234', 0],
            ['91212129', 9],
            [self::getPuzzleInput(), 1171]
        ];
    }

    /**
     * @dataProvider inputOutputProvider
     */
    public function testSolution(string $input, int $output): void
    {
        $this->assertEquals($output, $this->part1->solution($input));
    }

    protected function setUp(): void
    {
        $this->part1 = new Part1();
    }
}
